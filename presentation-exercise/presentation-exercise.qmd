---
title: "Presentation Exercise"
---

# Recreating a professional viz

## Laying the foundation with ChatGPT prompts

With this exercise we'll aim to generate some professional looking figures by using previously composed professional figures as inspiration. Specifically we'll be looking to recreate the 4th figure from this [FiveThirtyEight article](https://fivethirtyeight.com/features/aging-congress-boomers/).

Using the following prompts and the provided data we generated a foundation for recreating the visualization:

> *Could you use the highcharter package in R to replicate a chart similar to the one attached?*
>
> *Specifically each differently colored line should depict the median age of the largest generation group for each start_date year from 1937-2023 in the attached data set. The x-axis should be the 4-digit year from the start_date column and the axis ticks should be for every new decade. There should only be one generation shown for any given start_date year.*

> *Resolve the following error: Error: 'hcaes(x = plot_data\$year, y = plot_data\[\[gen\]\])' argument is not named in hc_add_series*

```{r}
pacman::p_load(highcharter,
               dplyr,
               tidyr)

# Load data
data <- readr::read_csv("../presentation-exercise/raw-data/data_aging_congress.csv")

# Convert start_date to Date and extract year
data$start_date <- as.Date(data$start_date)
data$year <- as.numeric(format(data$start_date, "%Y"))

# Filter data to include only the years 1937-2023
data <- data %>% filter(year >= 1937 & year <= 2023)

# Calculate the median age for each generation by year
median_age_by_generation <- data %>%
  group_by(year, generation) %>%
  summarise(median_age = median(age_years, na.rm = TRUE)) %>%
  ungroup()

# Determine the largest generation for each year
largest_generation_by_year <- data %>%
  group_by(year, generation) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  group_by(year) %>%
  filter(count == max(count)) %>%
  ungroup()

# Merge with median age data
largest_generation_median_age <- merge(largest_generation_by_year, median_age_by_generation, by = c("year", "generation"))

# Prepare data for plotting
plot_data <- largest_generation_median_age %>%
  select(year, generation, median_age) %>%
  pivot_wider(names_from = generation, values_from = median_age)

# Convert year to numeric for proper plotting
plot_data$year <- as.numeric(plot_data$year)

# Plot using highcharter
hc <- highchart() %>%
  hc_xAxis(title = list(text = "Year"),
           categories = unique(plot_data$year),
           tickInterval = 10) %>%
  hc_yAxis(title = list(text = "Median Age")) %>%
  hc_title(text = "Median age of the largest generation in each Congress, 1937 to 2023")

# Add series for each generation
for (gen in names(plot_data)[-1]) {
  hc <- hc %>%
    hc_add_series(name = gen,
                  data = plot_data[[gen]],
                  type = "line")
}

# Print the chart
hc
```

For an initial pass this got me fairly close, with only the largest generation for a given year represented and the correct median values displayed at each point. However a lot of the styling needed additional work. Changing line colors, changing font styles, reformatting tooltips, removing the legend and axis titles, and including captions/credits/subtitles were among many of the added styling steps necessary to approximate the design of the original chart.

## Tweaking styling to better approximate the original

```{r}
# Install and load necessary libraries
pacman::p_load(highcharter,
               tidyverse)

# Load the data
data <- readr::read_csv("../presentation-exercise/raw-data/data_aging_congress.csv")

# Convert start_date to Date and extract year
data$start_date <- as.Date(data$start_date)
data$year <- as.numeric(format(data$start_date, "%Y"))

# Filter data to include only the years 1937-2023
data <- data %>% filter(year >= 1937 & year <= 2023)

# Calculate the median age for each generation by year
median_age_by_generation <- data %>%
  group_by(year, generation) %>%
  summarise(median_age = round(median(age_years, na.rm = TRUE), 1)) %>%
  ungroup()

# Determine the largest generation for each year
largest_generation_by_year <- data %>%
  group_by(year, generation) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  group_by(year) %>%
  filter(count == max(count)) %>%
  ungroup()

# Merge with median age data
largest_generation_median_age <- merge(largest_generation_by_year, median_age_by_generation, by = c("year", "generation"))

# Prepare data for plotting
plot_data <- largest_generation_median_age %>%
  select(year, generation, median_age) %>%
  pivot_wider(names_from = generation, values_from = median_age)

# Convert year to numeric for proper plotting
plot_data$year <- as.numeric(plot_data$year)

# Define the ticks for the first year of each decade
tick_positions <- seq(2, 81, by = 5)

# Create background bands for each generation period
bands <- list(
  list(from = 0, to = 8, color = "rgba(200, 200, 200, 0.2)", label = list(text = "LOST", style = list(fontFamily = "Arial", fontWeight = "bold", color = "#000000"))),  # Lost Generation
  list(from = 9, to = 20, color = "rgba(200, 200, 200, 0.2)", label = list(text = "GREATEST", style = list(fontFamily = "Arial", fontWeight = "bold", color = "#000000"))),  # Greatest Generation
  list(from = 21, to = 31, color = "rgba(200, 200, 200, 0.2)", label = list(text = "SILENT", style = list(fontFamily = "Arial", fontWeight = "bold", color = "#000000"))),  # Silent Generation
  list(from = 32, to = 44, color = "rgba(200, 200, 200, 0.2)", label = list(text = "BOOMER", style = list(fontFamily = "Arial", fontWeight = "bold", color = "#000000")))   # Boomers
)

# Plot using highcharter
hc <- highchart() %>%
  hc_xAxis(plotBands = bands,
           title = list(enabled = FALSE),
           categories = plot_data$year,
           tickPositions = tick_positions,
           labels = list(format = '{value}'),
           gridLineWidth = 0
  ) %>%
  hc_yAxis(title = list(enabled = FALSE)) %>%
  hc_title(text = "Congress is never dominated by generations as old as boomers", 
           align = "left",
           style = list(fontFamily = "Arial",
                        fontWeight = "bold",
                        fontSize = "20px",
                        color = "#000000")) %>% 
  hc_subtitle(text = "Median age of the largest generation in each Congress, 1937 to 2023",
              align = "left",
              style = list(fontFamily = "Arial",
                           fontSize = "16px",
                           color = "#000000")) %>% 
  hc_legend(enabled = FALSE) %>%
  hc_credits(enabled = TRUE, text = "SOURCES: BIOGRAPHICAL DIRECTORY OF THE U.S. CONGRESS, U.S. HOUSE OF REPRESENTATIVES, U.S. SENATE, UNITEDSTATES GITHUB, VOTEVIEW.COM") %>% 
  hc_caption(text = "Birth years for the Greatest Generation to baby boomers are based on Pew Research Center definitions, while the Lost Generation is defined by Strauss and Howe (1991). They are: Lost (1883-1900), Greatest (1901-1927), Silent (1928-1945), baby boomer (1946-1964).", style = list(fontSize = "11px")) %>% 
  hc_tooltip(backgroundColor = NULL, borderWidth = 0, style = list(color = "#000000", fontWeight = "bold"), headerFormat = "{series.name}<br>{point.x}<br>{point.y}", pointFormat = "") %>% 
  hc_colors(c("#2e2e2e", "#29ad53", "#fccd25", "#ff003f")) %>% 
  hc_add_theme(hc_theme_538())

# Add series for each generation
for (gen in names(plot_data)[-1]) {
  hc <- hc %>%
    hc_add_series(name = gen,
                  data = plot_data[[gen]],
                  type = "line",
                  marker = list(enabled = FALSE))
}

# Print the chart
hc
```

![](../presentation-exercise/original-viz.png)

After making as many of the necessary changes as I could we have arrived at a fairly faithful reproduction of the original chart. Some of the drawbacks of leveraging ChatGPT to lay the foundation of the visualization is that it made some coding choices with the `highcharter` package that I wasn't as familiar with manipulating as I may have been if I had first learned how to utilize the package myself from the ground up. Additionally there were some custom, paid fonts utilized by the publication that I couldn't quite justify springing for as a student. However, overall the visualization is functional and largely styled in the same manner.

# Creating a clean table

## Laying the foundation with ChatGPT prompts

Utilizing the below prompts we arrive at a foundation for a table of generational composition among classes of Congress throughout the years:

> Using this data set create a table with the 'gt' package in R that calculates the generation composition of each start_date year as percentages. Exclude Gen Z from considerations. Format the values as percentages, center all values and headings, and bold the title.

```{r}
pacman::p_load(gt,
               tidyverse)

# Load the data
data <- readr::read_csv("../presentation-exercise/raw-data/data_aging_congress.csv")

# Filter out Gen Z
data <- data %>% filter(generation != "Gen Z")

# Extract year from start_date
data$start_year <- format(as.Date(data$start_date), "%Y")

# Calculate generation composition by year
generation_composition <- data %>%
  group_by(start_year, generation) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ungroup() %>%
  select(start_year, generation, percentage) %>%
  spread(key = generation, value = percentage, fill = 0)

# Create the table with gt
generation_composition %>%
  gt() %>%
  tab_header(
    title = md("**Generation Composition by Start Year**")
  ) %>%
  fmt_number(
    columns = vars(-start_year),
    decimals = 2
  ) %>%
  fmt_percent(
    columns = vars(-start_year),
    decimals = 2
  ) %>%
  cols_align(
    align = "center"
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_title()
  )
```

Having now had a little more practice with prompting ChatGPT to write effective code and preempt the issues with it's interpretations of my instructions I'd say that this foundational attempt got quite close to the desired output. However, there remain a handful of issues and layout preferences that need changing. 

Namely we need to address the fact that ChatGPT attempted to convert the values to percent before then formatting those converted values themselves as a percent a second time. It would also be preferred if the columns were arranged in order of their chronology and if the table's title was a bit more descriptive. Finally, having seen how little representation through the years that the Gilded and Progressive generations have, we may wish to exclude these generations in the same way that we had previously excluded Gen Z. 

## Refining the table

```{r}
pacman::p_load(gt,
               tidyverse)

# Load the data
data <- readr::read_csv("../presentation-exercise/raw-data/data_aging_congress.csv")

# Filter out Gen Z, the Gilded generation, and the Progressive generation
data <- data %>% filter(generation != "Gen Z" | generation == "Gilded" | generation == "Progressive")

# Extract year from start_date
data$start_year <- format(as.Date(data$start_date), "%Y")

# Calculate generation composition by year
generation_composition <- data %>%
  group_by(start_year, generation) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count)) %>%
  ungroup() %>%
  select(start_year, generation, percentage) %>%
  spread(key = generation, value = percentage, fill = 0)

# Rename the column 'start_year' to 'Year' 
# and reorder columns in generation order
generation_composition <- generation_composition %>%
  rename(Year = start_year) %>% 
  select(Year, Missionary, Lost, Greatest, Silent, Boomers, `Gen X`, Millennial)

# Create the table with gt
generation_composition %>%
  gt() %>%
  tab_header(
    title = md("**Generational Composition of Congress by Year**")
  ) %>%
  fmt_number(
    columns = vars(-Year),
    decimals = 2
  ) %>%
  fmt_percent(
    columns = vars(-Year),
    decimals = 2
  ) %>%
  cols_align(
    align = "center"
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_title()
  )
```
