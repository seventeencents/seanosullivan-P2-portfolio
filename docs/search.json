[
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Simulated Starter Data Analysis Project",
    "section": "",
    "text": "1 Findings\nAlex Martinez contributed to this exercise on 2024-06-15.\nFirst we examine our two new variables and how they relate to our prior variables of height and weight.\n\n\n\n\n\n\n\n\n\nWhen examining boxplots of height across employment status we observe that folks who are employed full-time tend to be taller than those who are employed full-time. However, of note the single unemployed person is among the tallest across all 3 classifications.\n\n\n\n\n\n\n\n\n\nWhen we examine a scatterplot of weight against annual salary in USD we observe that those with middle of the road weights tended to make the most money, with those over- or under-weight earning less.\nOn the whole it would seem that our simulated data tells the story of pretty privilege, with those that are taller and of well-adjusted weights being more likely to be employed full-time and high-earners.\n\nprint(linearmodel)\n\n# A tibble: 3 × 5\n  term           estimate std.error statistic p.value\n  &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  157.       23.8          6.61  0.00119\n2 Salary         0.000190  0.000351     0.541 0.612  \n3 EmploymentPT  -6.74     19.0         -0.355 0.737  \n\n\nExamining a linear model of height as a function of salary and employment status we see predictably no statistical significance for either predictor variables as, in addition to being simulated data, the relationship in question is dubious and nonsensical at best."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.3.3\n\nlibrary(here) #to set paths\n\nhere() starts at C:/Users/Hylti/OneDrive/Documents/School/Practicum II/seanosullivan-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                         `Allowed Values`\n  &lt;chr&gt;           &lt;chr&gt;                                         &lt;chr&gt;           \n1 Height          height in centimeters                         numeric value &gt;…\n2 Weight          weight in kilograms                           numeric value &gt;…\n3 Gender          identified gender (male/female/other)         M/F/O/NA        \n4 Salary          Annual salary in USD                          numeric value &gt;…\n5 Employment      Employment status (full-time, part-time, une… FT/PT/U         \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height     &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"15…\n$ Weight     &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender     &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\"…\n$ Salary     &lt;chr&gt; \"87000\", \"93000\", \"NA\", \"NA\", \"65000\", \"45000\", \"48000\", \"1…\n$ Employment &lt;chr&gt; \"FT\", \"FT\", \"U\", \"U\", \"FT\", \"FT\", \"FT\", \"PT\", \"FT\", \"FT\", \"…\n\nsummary(rawdata)\n\n    Height              Weight          Gender             Salary         \n Length:14          Min.   :  45.0   Length:14          Length:14         \n Class :character   1st Qu.:  55.0   Class :character   Class :character  \n Mode  :character   Median :  70.0   Mode  :character   Mode  :character  \n                    Mean   : 602.7                                        \n                    3rd Qu.:  90.0                                        \n                    Max.   :7000.0                                        \n                    NA's   :1                                             \n  Employment       \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender Salary Employment\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;     \n1 180        80 M      87000  FT        \n2 175        70 O      93000  FT        \n3 sixty      60 F      NA     U         \n4 178        76 F      NA     U         \n5 192        90 NA     65000  FT        \n6 6          55 F      45000  FT        \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nSalary\n0\n1\n2\n5\n0\n12\n0\n\n\nEmployment\n0\n1\n1\n2\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nSalary\n0\n1\n2\n5\n0\n12\n0\n\n\nEmployment\n0\n1\n1\n2\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nSalary\n0\n1\n2\n5\n0\n12\n0\n\n\nEmployment\n0\n1\n1\n2\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nSalary\n0\n1\n2\n5\n0\n11\n0\n\n\nEmployment\n0\n1\n1\n2\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSalary\n0\n1\n2\n5\n0\n11\n0\n\n\nEmployment\n0\n1\n1\n2\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSalary\n0\n1\n2\n5\n0\n9\n0\n\n\nEmployment\n0\n1\n1\n2\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\n\nd5 &lt;- d4 %&gt;% dplyr::mutate(Salary = as.numeric(Salary),\n                           Employment = as.factor(Employment))\n\nWarning: There was 1 warning in `dplyr::mutate()`.\nℹ In argument: `Salary = as.numeric(Salary)`.\nCaused by warning:\n! NAs introduced by coercion\n\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nSalary\n0\n1\n2\n5\n0\n9\n0\n\n\nEmployment\n0\n1\n1\n2\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d5\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Landing Page",
    "section": "",
    "text": "Welcome to my website and data science portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "index.html#howdy",
    "href": "index.html#howdy",
    "title": "Landing Page",
    "section": "",
    "text": "Welcome to my website and data science portfolio.\n\nPlease use the Menu Bar above to look around.\nHave fun!"
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "About Me",
    "section": "",
    "text": "My name is Sean O’Sullivan and I’m a data analyst at Disney. I have an Bachelor of Science in Economics from Texas A&M University – College Station and have taken a handful of undergraduate statistics, calculus, and econometrics courses as a result. I’ve always been fascinated with technology and enjoy tinkering – whether that means building mechanical keyboards or tinkering with software and programming languages.\nAs I’ve gotten older that fascination with technology, how it works, and what impacts it has on stakeholders in society has only grown. I often find myself frequenting articles about the changing internet landscape, transitions to sustainable energy, and (perhaps unsurprisingly given my undergraduate degree) the profound ways that access to new data driven technologies shape the economic opportunities of whole communities around the globe.\nAs I’ve moved further into my career as a data analyst I’ve found myself drawn to the more advanced and technical side of things like data engineering and specifically data science. It’s my aim with my MSDA degree (and an accompanying graduate certification in data science) to spend a lot less of my future career conceptualizing dashboards in Tableau and a lot more focused in designing reproducible analysis pipelines that are statistically and methodologically sound so that the work I do can generate more significant insights and inform product level decisions.\nHowever, my interests are more varied than simply technology and data. For instance at an earlier point in my career as a workforce analyst, when it seemed my data analysis journey had stalled, I considered quitting my job and starting work full-time as a photographer. I’d spent years doing part-time work and taking on event gigs for local bands and nonprofits, friends’ weddings, professional headshots, etc. and I found that creative process to be incredibly freeing and less dependent on a trajectory charted out by an established, objective industry like data. I was ultimately insistent that I develop my data skillset, but the very real possibility that I might not be here today underscores how valuable I think artistic pursuits and hobbies can be to revitalizing your ambition. As a result I make a conscious effort to take time to either appreciate art or engage in creativity myself. If you’d like to connect with me professionally you can visit my LinkedIn.\n\nData Resources I Recommend\n\n\n\n\n\n\n\nLink\nDescription\n\n\n\n\nThe Data Scientist Show\nA data science podcast hosted by Daliana Liu that covers topics from machine learning techniques to tools and job hunting. I find it helpful for reinforcing what I’ve learned so far as well as an avenue for new topics of interest to discover.\n\n\nMatt Harrison’s Python for Data Science Books\nI’ve surveyed a few of Matt Harrison’s courses that he’s helped to author for the likes of Coursera, edX, and Pluralsight and have found his teaching style to be really easily to follow and the material is always something that can be directly and actively applied as you’re going through the learning process. He also makes for a strong follow as a regular contributor to data science discourse on LinkedIn. I’ve personally recently purchased his Effective Pandas 2 book in order to refine my data wrangling skills.\n\n\n#TidyTuesday\nThis is a link to the Tidy Tuesday hashtag on Twitter. In the fall semester of my MSDA degree I would regularly check out the various different interpretations of the same dataset that novice and experienced analysts alike were sharing. While I have less experience in R than I do in Python, I’m always impressed by the high-level of polish with which you can visualize in R. This hashtag helps to keep me inspired.\n\n\nDatawrapper\nThis blog keeps me honest about the various considerations for effective and professional looking data visualizations. I highly recommend perusing it whenever you’re looking to ensure you are utilizing visualization best practices."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "# load and install necessary packages for notebook\npacman::p_load(dslabs,\n               ggplot2,\n               ggthemes,\n               skimr,\n               tidyverse)\n\n\n# look at help file for gapminder\nhelp(gapminder)\n\nstarting httpd help server ... done\n\n\n\n# get an overview of the data\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n\n\n# get a summary of the data\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\n\n# determine gapminder object type\nclass(gapminder)\n\n[1] \"data.frame\"\n\n\n\n# create an African data only subset\nafricandata &lt;- gapminder %&gt;% filter(continent == \"Africa\")\nstr(africandata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africandata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n\n\n# create mortality and life expectancy subset dataframe\nmortexp &lt;- africandata %&gt;% select(infant_mortality, life_expectancy)\nstr(mortexp)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(mortexp)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n\n\n# create population and life expectancy subset dataframe\npopexp &lt;- africandata %&gt;% select(population, life_expectancy)\nstr(popexp)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(popexp)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51                         \n\n\n\n#creating a plot of infant mortality and life expectancy\nmortexp %&gt;% \n  ggplot(aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point(alpha = 0.3, color = \"coral2\", na.rm = TRUE) +\n  xlab(\"Infant Mortality Rate\") + ylab(\"Life Expectancy\") +\n  theme_clean()\n\n\n\n\n\n\n\n\n\n#creating a plot of population and life expectancy\npopexp %&gt;% \n  ggplot(aes(x = population, y = life_expectancy)) +\n  geom_point(alpha = 0.3, color = \"coral2\", na.rm = TRUE) +\n  xlab(\"Population\") + ylab(\"Life Expectancy\") +\n  scale_x_continuous(trans = \"log\") +\n  theme_clean()\n\n\n\n\n\n\n\n\nLooking at the above plots we can observe nearly linearly connected streaks in the data which corresponds with the autocorrelative nature of the annual data found in our original dataset.\n\n# examine a subset dataframe that only contains missing infant mortality rows\nsummary(africandata %&gt;% filter(is.na(infant_mortality)))\n\n              country         year      infant_mortality life_expectancy\n Equatorial Guinea: 23   Min.   :1960   Min.   : NA      Min.   :35.71  \n Angola           : 19   1st Qu.:1963   1st Qu.: NA      1st Qu.:42.07  \n Gabon            : 19   Median :1968   Median : NA      Median :46.02  \n Djibouti         : 17   Mean   :1978   Mean   :NaN      Mean   :48.92  \n Guinea-Bissau    : 17   3rd Qu.:1978   3rd Qu.: NA      3rd Qu.:52.70  \n South Africa     : 15   Max.   :2016   Max.   : NA      Max.   :77.60  \n (Other)          :116                  NA's   :226                     \n   fertility       population            gdp               continent  \n Min.   :4.380   Min.   :   83636   Min.   :9.997e+07   Africa  :226  \n 1st Qu.:5.680   1st Qu.:  257709   1st Qu.:1.019e+09   Americas:  0  \n Median :6.360   Median :  686155   Median :1.899e+09   Asia    :  0  \n Mean   :6.306   Mean   : 4935222   Mean   :1.373e+10   Europe  :  0  \n 3rd Qu.:6.945   3rd Qu.: 5814296   3rd Qu.:5.942e+09   Oceania :  0  \n Max.   :7.430   Max.   :46144154   Max.   :7.600e+10                 \n NA's   :51      NA's   :51         NA's   :159                       \n                       region  \n Middle Africa            :83  \n Eastern Africa           :62  \n Western Africa           :50  \n Southern Africa          :25  \n Northern Africa          : 6  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n# create subset of African data for the year 2000\nafricandata2000 &lt;- africandata %&gt;% filter(year == 2000)\nstr(africandata2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africandata2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n\n\n#creating a plot of infant mortality and life expectancy for 2000\nafricandata2000 %&gt;% \n  ggplot(aes(x = infant_mortality, y = life_expectancy)) +\n  geom_point(alpha = 0.65, color = \"coral2\") +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = FALSE, color = \"slategrey\") +\n  xlab(\"Infant Mortality Rate\") + ylab(\"Life Expectancy\") +\n  theme_clean()\n\n\n\n\n\n\n\n#creating a plot of population and life expectancy for 2000\nafricandata2000 %&gt;% \n  ggplot(aes(x = population, y = life_expectancy)) +\n  geom_point(alpha = 0.65, color = \"coral2\") +\n  xlab(\"Population\") + ylab(\"Life Expectancy\") +\n  scale_x_continuous(trans = \"log\") +\n  theme_clean()\n\n\n\n\n\n\n\n\nWhen we examine a single year (in this case the year 2000) we observe that there is a negative relationship between infant mortality rate and life expectancy.\n\n# fit linear model of life expectancy as a function of infant mortality\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, data = africandata2000)\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africandata2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n# fit linear model of life expectancy as a function of population\nfit2 &lt;- lm(life_expectancy ~ population, data = africandata2000)\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africandata2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\nBased on linear models fit against both population and infant mortality we can see that we have a statistically significant relationship between infant mortality and life expectancy, but no such similarly significant relationship with population. The former relationship makes intuitive sense – the more deaths as an infant the more downwardly skewed you would expect the life expectancy of that country.\n\nThis section contributed by William Hyltin\nFor this part of the analysis we will look at the “murders” dataset, which contains gun murder data from FBI report from the year 2010.\n\n#importing one more package to help with choropleth plot later\npacman::p_load(maps)\n\nObserving the help file to understand the variables in the dataset.\n\nhelp(murders)\n\nUnderstanding the structure of the data.\n\nstr(murders)\n\n'data.frame':   51 obs. of  5 variables:\n $ state     : chr  \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n $ abb       : chr  \"AL\" \"AK\" \"AZ\" \"AR\" ...\n $ region    : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n $ population: num  4779736 710231 6392017 2915918 37253956 ...\n $ total     : num  135 19 232 93 1257 ...\n\n\nUnderstanding the distribution and basics stats of the variables in the dataset.\n\nsummary(murders)\n\n    state               abb                      region     population      \n Length:51          Length:51          Northeast    : 9   Min.   :  563626  \n Class :character   Class :character   South        :17   1st Qu.: 1696962  \n Mode  :character   Mode  :character   North Central:12   Median : 4339367  \n                                       West         :13   Mean   : 6075769  \n                                                          3rd Qu.: 6636084  \n                                                          Max.   :37253956  \n     total       \n Min.   :   2.0  \n 1st Qu.:  24.5  \n Median :  97.0  \n Mean   : 184.4  \n 3rd Qu.: 268.0  \n Max.   :1257.0  \n\n\nFinally, confirming the data type is in fact a data frame.\n\nclass(murders)\n\n[1] \"data.frame\"\n\n\nThe “total” is somewhat non-descriptive, so I rename the variable so that I don’t mistake it for population or some other representation of the data (e.g. the dataset is gun murder but there would be no way to tell that its gun murder from just the data or columns). Also, given the geographic nature of the data I will want to play with a choropleth map. The maps package I brought in earlier will have some conflicts with a column named “region,” so we rename it here while we’re under the hood.\n\n# renaming \"total\" column and region column, because region column will have later conflicts\nd1 &lt;- murders %&gt;% rename(gun_deaths = total, geo_region = region)\n# names function to get the names of the columns.\nnames(d1)\n\n[1] \"state\"      \"abb\"        \"geo_region\" \"population\" \"gun_deaths\"\n\n\nJumping ahead a bit, there are likely some problems with just using a count of gun deaths alone. factors like population, which is included, will play a part. A standard measurement for deaths is number of deaths per 100,000 people, and while there is generally more that goes into the calculation of this metric, we can use a simple version here by dividing gun_deaths by population and multiplying by 100,000. Again, while we are under the hood, we make change the state variable to lower case, which will again help when we merge to our map data, and we change the geo_region variable to a factor, which helps with visualizations later on.\n\n# new column with gun deaths per 100,000 in population\n# lower case state names for later merge for visualization\n#region as a factor variable\nd2 &lt;- d1 %&gt;% mutate(\n  dpp = gun_deaths / population * 100000,\n  state = tolower(state),\n  geo_region = as.factor(geo_region)\n)\n\nAs a quick check for outliers and to make sure the previous mutates worked as expected, we can take the top 10 values from the dataset, ordered in descending order by dpp. We find one in District of Columbia, which is more than double the next highest value in deaths per 100,000 people. Given its generally lower population (though worth noting, not lowest), and its unique status of not being a state, it seems a little unfair to compare states to it. I made the decision to exclude it here.\n\nd2 %&gt;% arrange(-dpp) %&gt;% head(10)\n\n                  state abb    geo_region population gun_deaths       dpp\n1  district of columbia  DC         South     601723         99 16.452753\n2             louisiana  LA         South    4533372        351  7.742581\n3              missouri  MO North Central    5988927        321  5.359892\n4              maryland  MD         South    5773552        293  5.074866\n5        south carolina  SC         South    4625364        207  4.475323\n6              delaware  DE         South     897934         38  4.231937\n7              michigan  MI North Central    9883640        413  4.178622\n8           mississippi  MS         South    2967297        120  4.044085\n9               georgia  GA         South    9920000        376  3.790323\n10              arizona  AZ          West    6392017        232  3.629527\n\nd2 &lt;- d2 %&gt;% filter(dpp!=max(dpp))\n\nA few last odds and ends before we go into visualizations, here we use the map_data function to get a dataset of map location and shape information. This is important for the choropleth map we make momentarily.\n\n#creating a map dataframe for states\nstates &lt;- map_data('state')\n\nOnce we have our map dataset, we can merge it to the gun deaths dataset. We erge by the field region in the map dataset, which was the lower-case state name, and the state field in the gun deaths dataset. This is why we needed the state name to be lower case in our main data, and also why we could not have a field named region to identify the geographic region and not the state. The order function at the end is to ensure the shape data for each state is in the correct order to be drawn later.\n\nchoro &lt;- merge(states, d2, sort=FALSE, by.x = 'region', by.y = 'state')\nchoro &lt;- choro[order(choro$order),]\n\nThe geographic region is the broadest of our categorical variables, so I wanted to start here. This code summarizes the variables of interest by summing up the respective region groups, with the exception of dpp which would need to be recalculated to roll up to this level. We see the differences are not too large, with the exception of the South which is generally larger in all three variables over the other regions.\n\n#summarizing by geo_region\ngun_region &lt;- d2 %&gt;% \n  group_by(geo_region) %&gt;%\n  summarize(\n    tot_gun = sum(gun_deaths),\n    population = sum(population),\n    dpp = sum(gun_deaths)/sum(population) * 100000\n  ) %&gt;% as.data.frame() %&gt;% arrange(-tot_gun)\nhead(gun_region) # df only four rows, but head() used in case something blew up somehow\n\n     geo_region tot_gun population      dpp\n1         South    4096  115072711 3.559489\n2          West    1911   71945553 2.656175\n3 North Central    1828   66927001 2.731334\n4     Northeast    1469   55317240 2.655592\n\n\nWe visualize the above gun_deaths information here for the sake of consumption.\n\n# bar chart of regions\ngun_region %&gt;% ggplot(aes(x=fct_reorder(geo_region,-tot_gun), y=tot_gun)) +\n  geom_bar(stat = 'identity') +\n  labs(title = 'Count of US Gun Deaths by Geographic Region', x = 'Geographic Region', y = 'Gun Deaths')\n\n\n\n\n\n\n\n\nThe choropleth map here gives us an idea of the number of deaths by state in order to help identify any particular regions or locations that are more dangerous than others. However this plot could almost serve as a proxy for population, because the most populous states generally have the most gun deaths. geom_polygon was used along with the merged map data, and gun_deaths was used as the fill to highlight states with more gun deaths than others.\n\n# ggplot and geom_polygon for chorpleth map, using gun_deaths\nggplot(choro, aes(long, lat)) +\n  geom_polygon(aes(group = group, fill = gun_deaths), color = 'white') +\n  coord_map('albers', lat0 = 45.5, lat1=29.5) + \n  labs(title = 'Total US Gun Deaths', x = '', y = '') +\n  scale_fill_continuous(name = 'Number of \\nGun Deaths') # legend title\n\n\n\n\n\n\n\n\nTo remedy the last plots being obscured by the population, we can use the dpp variable we created instead of gun_deaths. Now we have generally better demarcation of states with more gun deaths. Still, it has not told us too much that is new. We see some states that stand out as being higher, and generally the Northern parts of the West are low. However, this begs the question, are gun deaths just as bad everywhere, except a few states? Put simply, do gun deaths happen more often in some states solely because of population, do more gun deaths in a state lead to more deaths per person?\n\n# ggplot and geom_polygon for chorpleth map, using dpp\nggplot(choro, aes(long, lat)) +\n  geom_polygon(aes(group = group, fill = dpp), color = 'white') +\n  coord_map('albers', lat0 = 45.5, lat1=29.5) +\n  labs(title = 'US Gun Deaths per 100,000 People', x = '', y = '') + \n  scale_fill_continuous(name = 'Deaths \\nper 100,000')\n\n\n\n\n\n\n\n\nBacking up a bit, here we plot gun deaths against population, and a clear linear trend exists, though that may be emphasized by California in the top right. Thus far it appears to be that population is the major factor, but if this is true then if we plot deaths per person against gun deaths there should be no slope, because as gun deaths increase, population would also be increasing at a constant rate. For this and subsequent charts, geom point is used, with each region marked by different colored points, with the intention of seeing if there is any clustering going on.\n\nd2 %&gt;% ggplot(aes(x=population, y=gun_deaths, color = geo_region)) + \n  geom_point() +\n  labs(title = 'US Gun Deaths vs Population', x = 'Population', y = 'Gun Deaths')\n\n\n\n\n\n\n\n\nHere we see the trend become much less apparent. It appears that deaths per 100,000 increases with the number of deaths at first, but then we get several observations where the trend seems to dissipate. However Deaths per 100,000 people is a much smaller scale than gun_deaths, so some additional transformations may bring us some clarity here.\n\nd2 %&gt;% ggplot(aes(x=gun_deaths, y=dpp, color = geo_region)) + \n  geom_point() +\n  labs(title = 'Gun Deaths per 100,000 People vs Count of Gun Deaths', x = 'Gun Deaths', y = 'Deaths per 100,000 People')\n\n\n\n\n\n\n\n\nThis plot is the same as the last one, but with a log base 2 scale for the count of gun deaths, to help with the disparity between the two variables. Our trend is much clearer now, which would suggest that gun deaths do not only increase with population. We can use some statistical methods to determine if the relationship is significant or not. scale_x_continuous() was used to transform the previous plot into a log base two scale. Additionally, bquote was used to get a subscript ‘2’ in the x-axis title.\n\nd2 %&gt;% ggplot(aes(x=gun_deaths, y=dpp, color = geo_region)) + \n  geom_point() +\n  scale_x_continuous(trans = 'log2') +\n  labs(title = 'Gun Deaths per 100,000 People vs Count of Gun Deaths', y = 'Deaths per 100,000 People',\n  x = bquote('Gun Deaths log'[2]))\n\n\n\n\n\n\n\n\nFrom here we have fit three linear models. The first of which is a baseline of sorts, fitting gun deaths as a function of population, and geographical region.\n\nfit3 &lt;- lm(gun_deaths ~ population + geo_region, data = d2) # lm fits the model\nsummary(fit3) # summary gives us the results\n\n\nCall:\nlm(formula = gun_deaths ~ population + geo_region, data = d2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-93.316 -41.058  -0.936  21.922 182.819 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             -3.980e+01  2.117e+01  -1.880   0.0666 .  \npopulation               3.303e-05  1.237e-06  26.708   &lt;2e-16 ***\ngeo_regionSouth          5.824e+01  2.473e+01   2.355   0.0229 *  \ngeo_regionNorth Central  7.909e+00  2.614e+01   0.303   0.7636    \ngeo_regionWest           3.996e+00  2.571e+01   0.155   0.8772    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 59.27 on 45 degrees of freedom\nMultiple R-squared:  0.9431,    Adjusted R-squared:  0.9381 \nF-statistic: 186.6 on 4 and 45 DF,  p-value: &lt; 2.2e-16\n\n\nWe can see the results are statistically significant. That is to say, we would reject the null hypothesis that there is no linear relationship between population and geographical region (specifically if the state is a southern state), and the number of gun deaths. This is to be expected, the question ultimately is whether larger gun deaths in one state versus another can be dismissed as a result of differences in population. Population effects the overall count, but frequency per person still must be observed.\nHere we fit a model for deaths per 100,000 people as a function of gun deaths and geographical region. Note the transformation taken for gun deaths was only applied to the one variable.\n\nfit4 &lt;- lm(dpp ~ log2(gun_deaths) + geo_region, data = d2) # log2 only taken on gun_deaths\nsummary(fit4)\n\n\nCall:\nlm(formula = dpp ~ log2(gun_deaths) + geo_region, data = d2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.3608 -0.6679 -0.2038  0.3823  3.6798 \n\nCoefficients:\n                        Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             -0.47185    0.49360  -0.956   0.3442    \nlog2(gun_deaths)         0.41701    0.06714   6.211 1.52e-07 ***\ngeo_regionSouth          1.00864    0.42401   2.379   0.0217 *  \ngeo_regionNorth Central  0.09457    0.42879   0.221   0.8264    \ngeo_regionWest           0.08065    0.42023   0.192   0.8487    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9685 on 45 degrees of freedom\nMultiple R-squared:  0.6195,    Adjusted R-squared:  0.5857 \nF-statistic: 18.32 on 4 and 45 DF,  p-value: 5.403e-09\n\n\nAgain we see statistically significant results, so we would reject the null hypothesis that there is no linear relationship between the log base 2 of gun deaths and geographical region, and gun deaths per 100,000 people. It is worth noting the Adjusted R Square is .5857, meaning 58.57% of the variance is explained by this model. The last model had a better R-square, but again that is to be expected, and we will see in a moment that population explains less variance in the rate than the count of gun deaths does.\nOur last model is a sanity check of sorts, but we fit deaths per 100,000 people against the log base 2 of the population. We do this to determine if this relationship exists and to see how much variance it explains compared to the last model.\n\nfit5 &lt;- lm(dpp ~ log2(population) + geo_region, data = d2)\nsummary(fit5)\n\n\nCall:\nlm(formula = dpp ~ log2(population) + geo_region, data = d2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.6525 -0.8531 -0.2354  0.6224  4.1551 \n\nCoefficients:\n                        Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)              -6.1836     2.6375  -2.345  0.02352 * \nlog2(population)          0.3703     0.1202   3.081  0.00352 **\ngeo_regionSouth           1.5839     0.5055   3.134  0.00304 **\ngeo_regionNorth Central   0.2506     0.5296   0.473  0.63831   \ngeo_regionWest            0.1071     0.5216   0.205  0.83817   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.199 on 45 degrees of freedom\nMultiple R-squared:  0.4163,    Adjusted R-squared:  0.3645 \nF-statistic: 8.025 on 4 and 45 DF,  p-value: 5.678e-05\n\n\nWe still see statistically significant results, so we would still reject the null hypothesis that there is no linear relationship between the log base 2 of population and geographical region, and deaths per 100,000 people. However, we can see there is an adjusted R-Square of 0.3645, so only 36.45% of the variance is explained by this model. While there is a significant amount of variation explained here, more variation is explained by the count of gun deaths than population. With this, it would be safe to say that a larger number of gun deaths in a state is not just a result of a larger population, and would likely lead to a larger rate of gun deaths overall."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "Placeholder file for the future data/results presentation exercise."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda-copy.html",
    "href": "starter-analysis-exercise/code/eda-code/eda-copy.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at C:/Users/Hylti/OneDrive/Documents/School/Practicum II/seanosullivan-P2-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.3.3\n\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   2     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts        \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2  \n2 Employment            0             1 FALSE          3 FT: 5, PT: 3, U: 1\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate    mean      sd    p0   p25   p50   p75\n1 Height                0         1       166.     16.0   133   156   166   178\n2 Weight                0         1        70.1    21.2    45    55    70    80\n3 Salary                1         0.889 48875   27946.  19000 26500 46500 58500\n   p100 hist \n1   183 ▂▁▃▃▇\n2   110 ▇▂▃▂▂\n3 93000 ▇▅▂▁▅\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible.\nMake a copy, add code to the new file that creates a boxplot with the new categorical variable (whatever it is) on the x-axis, and height on the y-axis.\n\np5 &lt;- ggplot(mydata, aes(x = Employment, y = Height)) +\n  geom_boxplot(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Employment\", y = \"Height\", title = \"Boxplot of Height by Employment\") +\n  theme_minimal()\nplot(p5)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-employ-boxplot.png\")\nggsave(filename = figure_file, plot=p5) \n\nSaving 7 x 5 in image\n\n\nAlso create a scatterplot with weight on the x-axis and the new numerical variable on the y-axis. Save both figures to files.\n\np6 &lt;- mydata[which(!is.na(mydata$Salary)),] %&gt;% \n  ggplot(aes(x = Weight, y = Salary)) +\n  geom_point(color = \"blue\") +\n  labs(x = \"Weight\", y = \"Salary\", title = \"Scatter Plot of Weight vs. Salary\") +\n  theme_minimal()\nplot(p6)\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-salary-scatter.png\")\nggsave(filename = figure_file, plot=p6) \n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.3.3\n\nlibrary(here) #to set paths\n\nhere() starts at C:/Users/Hylti/OneDrive/Documents/School/Practicum II/seanosullivan-P2-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Sean O'Sullivan's Data Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  }
]